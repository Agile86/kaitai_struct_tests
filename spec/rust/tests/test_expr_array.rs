// Autogenerated from KST: please remove this line if doing any edits by hand!

use std::fs;

extern crate kaitai;
use self::kaitai::*;
mod formats;
use formats::expr_array::*;

#[test]
fn test_expr_array() {
    let bytes = fs::read("../../src/expr_array.bin").unwrap();
    let reader = BytesReader::new(&bytes);
    let mut r = ExprArray::default();

    if let Err(err) = r.read(&reader, None, Some(KStructUnit::parent_stack())) {

        panic!("{:?}", err);
    }
    assert_eq!(*r.aint_size(&reader).unwrap(), 4);
    assert_eq!(*r.aint_first(&reader).unwrap(), 7657765);
    assert_eq!(*r.aint_last(&reader).unwrap(), 16272640);
    assert_eq!(*r.aint_min(&reader).unwrap(), 49185);
    assert_eq!(*r.aint_max(&reader).unwrap(), 1123362332);
    assert_eq!(*r.afloat_size(&reader).unwrap(), 3);
    assert_eq!(*r.afloat_first(&reader).unwrap(), -2.6839530254859364E-121);
    assert_eq!(*r.afloat_last(&reader).unwrap(), -1.1103359815095273E-175);
    assert_eq!(*r.afloat_min(&reader).unwrap(), -8.754689149998834E+288);
    assert_eq!(*r.afloat_max(&reader).unwrap(), -1.1103359815095273E-175);
    assert_eq!(*r.astr_size(&reader).unwrap(), 3);
    assert_eq!(*r.astr_first(&reader).unwrap(), "foo");
    assert_eq!(*r.astr_last(&reader).unwrap(), "baz");
    assert_eq!(*r.astr_min(&reader).unwrap(), "bar");
    assert_eq!(*r.astr_max(&reader).unwrap(), "foo");
}
