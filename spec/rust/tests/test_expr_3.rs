// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::expr_3::*;

#[test]
fn test_expr_3() {
    let bytes = fs::read("../../src/fixed_struct.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<Expr3>> = Expr3::read_into(&_io, None, None);
    let r : OptRc<Expr3>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.one(), 80);
    assert_eq!(*r.two(), "ACK");
    assert_eq!(*r.three().expect("error reading"), "@ACK");
    assert_eq!(*r.four().expect("error reading"), "_ACK_");
    assert_eq!(*r.is_str_eq().expect("error reading"), true);
    assert_eq!(*r.is_str_ne().expect("error reading"), false);
    assert_eq!(*r.is_str_lt().expect("error reading"), true);
    assert_eq!(*r.is_str_gt().expect("error reading"), false);
    assert_eq!(*r.is_str_le().expect("error reading"), true);
    assert_eq!(*r.is_str_ge().expect("error reading"), false);
    assert_eq!(*r.is_str_lt2().expect("error reading"), true);
    assert_eq!(*r.test_not().expect("error reading"), true);
}
