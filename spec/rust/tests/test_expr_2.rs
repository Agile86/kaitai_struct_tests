// Autogenerated from KST: please remove this line if doing any edits by hand!

use std::fs;

extern crate kaitai;
use self::kaitai::*;
mod formats;
use formats::expr_2::*;

#[test]
fn test_expr_2() {
    let bytes = fs::read("../../src/str_encodings.bin").unwrap();
    let reader = BytesReader::new(&bytes);
    let mut r = Expr2::default();

    if let Err(err) = r.read(&reader, None, Some(KStructUnit::parent_stack())) {

        panic!("{:?}", err);
    }
    assert_eq!(r.str1().len_orig(), 10);
    assert_eq!(r.str1().len_mod(&reader).unwrap(), 7);
    assert_eq!(r.str1().str, "Some AS");
    assert_eq!(r.str1_len(&reader).unwrap(), 7);
    assert_eq!(r.str1_len_mod(&reader).unwrap(), 7);
    assert_eq!(r.str1_byte1(&reader).unwrap(), 73);
    assert_eq!(r.str1_avg(&reader).unwrap(), 73);
    assert_eq!(r.str1_char5(&reader).unwrap(), "e");
    assert_eq!(r.str1_tuple5(&reader).unwrap().byte0, 101);
    assert_eq!(r.str1_tuple5(&reader).unwrap().byte0, 101);
    assert_eq!(r.str1_tuple5(&reader).unwrap().byte1, 32);
    assert_eq!(r.str1_tuple5(&reader).unwrap().byte2, 65);
    assert_eq!(r.str1_tuple5(&reader).unwrap().avg(&reader).unwrap(), 48);
    assert_eq!(r.str2_tuple5(&reader).unwrap().byte0, 101);
    assert_eq!(r.str2_tuple5(&reader).unwrap().byte1, 32);
    assert_eq!(r.str2_tuple5(&reader).unwrap().byte2, 65);
    assert_eq!(r.str2_tuple5(&reader).unwrap().avg(&reader).unwrap(), 48);
}
