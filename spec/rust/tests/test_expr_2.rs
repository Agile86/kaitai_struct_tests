// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
#[path = "../formats/mod.rs"] mod formats;
use formats::expr_2::*;

#[test]
fn test_expr_2() {
    let bytes = fs::read("../../src/str_encodings.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<Expr2>> = Expr2::read_into(&_io, None, None);
    let r : OptRc<Expr2>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.str1().len_orig(), 10);
    assert_eq!(*r.str1().len_mod().expect("error reading"), 7);
    assert_eq!(*r.str1().str(), "Some AS");
    assert_eq!(*r.str1_len().expect("error reading"), 7);
    assert_eq!(*r.str1_len_mod().expect("error reading"), 7);
    assert_eq!(*r.str1_byte1().expect("error reading"), 73);
    assert_eq!(*r.str1_avg().expect("error reading"), 73);
    assert_eq!(*r.str1_char5().expect("error reading"), "e");
    assert_eq!(*r.str1_tuple5().expect("error reading").byte0(), 101);
    assert_eq!(*r.str1_tuple5().expect("error reading").byte0(), 101);
    assert_eq!(*r.str1_tuple5().expect("error reading").byte1(), 32);
    assert_eq!(*r.str1_tuple5().expect("error reading").byte2(), 65);
    assert_eq!(*r.str1_tuple5().expect("error reading").avg().expect("error reading"), 48);
    assert_eq!(*r.str2_tuple5().expect("error reading").byte0(), 101);
    assert_eq!(*r.str2_tuple5().expect("error reading").byte1(), 32);
    assert_eq!(*r.str2_tuple5().expect("error reading").byte2(), 65);
    assert_eq!(*r.str2_tuple5().expect("error reading").avg().expect("error reading"), 48);
}
