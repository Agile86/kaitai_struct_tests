// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::integers_double_overflow::*;

#[test]
fn test_integers_double_overflow() {
    let bytes = fs::read("../../src/integers_double_overflow.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<IntegersDoubleOverflow>> = IntegersDoubleOverflow::read_into(&_io, None, None);
    let r : OptRc<IntegersDoubleOverflow>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.signed_safe_min_be(), -9007199254740991);
    assert_eq!(*r.signed_safe_min_le(), -9007199254740991);
    assert_eq!(*r.signed_safe_max_be(), 9007199254740991);
    assert_eq!(*r.signed_safe_max_le(), 9007199254740991);
    assert_eq!(r.signed_unsafe_neg_be().to_string(), "-9007199254740993");
    assert_eq!(r.signed_unsafe_neg_le().to_string(), "-9007199254740993");
    assert_eq!(r.signed_unsafe_pos_be().to_string(), "9007199254740993");
    assert_eq!(r.signed_unsafe_pos_be().to_string(), "9007199254740993");
}
