// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::expr_bytes_ops::*;

#[test]
fn test_expr_bytes_ops() {
    let bytes = fs::read("../../src/nav_parent_switch.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<ExprBytesOps>> = ExprBytesOps::read_into(&_io, None, None);
    let r : OptRc<ExprBytesOps>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.one_size().expect("error reading"), 3);
    assert_eq!(*r.one_first().expect("error reading"), 1);
    assert_eq!(*r.one_mid().expect("error reading"), 66);
    assert_eq!(*r.one_last().expect("error reading"), 255);
    assert_eq!(r.one_last().expect("error reading").to_string(), "255");
    assert_eq!(*r.one_min().expect("error reading"), 1);
    assert_eq!(*r.one_max().expect("error reading"), 255);
    assert_eq!(r.one_max().expect("error reading").to_string(), "255");
    assert_eq!(*r.two_size().expect("error reading"), 3);
    assert_eq!(*r.two_first().expect("error reading"), 65);
    assert_eq!(*r.two_mid().expect("error reading"), 255);
    assert_eq!(r.two_mid().expect("error reading").to_string(), "255");
    assert_eq!(*r.two_last().expect("error reading"), 75);
    assert_eq!(*r.two_min().expect("error reading"), 65);
    assert_eq!(*r.two_max().expect("error reading"), 255);
    assert_eq!(r.two_max().expect("error reading").to_string(), "255");
}
