// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::enum_if::*;

#[test]
fn test_enum_if() {
    let bytes = fs::read("../../src/if_struct.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<EnumIf>> = EnumIf::read_into(&_io, None, None);
    let r : OptRc<EnumIf>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.op1().opcode(), EnumIf_Opcodes::AString);
    assert_eq!(*r.op1().arg_str().str(), "foo");
    assert_eq!(*r.op2().opcode(), EnumIf_Opcodes::ATuple);
    assert_eq!(*r.op2().arg_tuple().num1(), 66);
    assert_eq!(*r.op2().arg_tuple().num2(), 67);
    assert_eq!(*r.op3().opcode(), EnumIf_Opcodes::AString);
    assert_eq!(*r.op3().arg_str().str(), "bar");
}
