// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
#[path = "../formats/mod.rs"] mod formats;
use formats::str_encodings_utf16::*;

#[test]
fn test_str_encodings_utf16() {
    let bytes = fs::read("../../src/str_encodings_utf16.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<StrEncodingsUtf16>> = StrEncodingsUtf16::read_into(&_io, None, None);
    let r : OptRc<StrEncodingsUtf16>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.len_be(), 12);
    assert_eq!(*r.be_bom_removed().bom(), 65279);
    assert_eq!(*r.be_bom_removed().str(), "\u{3053}\u{3093}\u{306b}\u{3061}\u{306f}");
    assert_eq!(*r.len_le(), 12);
    assert_eq!(*r.le_bom_removed().bom(), 65279);
    assert_eq!(*r.le_bom_removed().str(), "\u{3053}\u{3093}\u{306b}\u{3061}\u{306f}");
}
