// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::expr_bytes_cmp::*;

#[test]
fn test_expr_bytes_cmp() {
    let bytes = fs::read("../../src/fixed_struct.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<ExprBytesCmp>> = ExprBytesCmp::read_into(&_io, None, None);
    let r : OptRc<ExprBytesCmp>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.one(), vec![0x50u8]);
    assert_eq!(*r.two(), vec![0x41u8, 0x43u8, 0x4bu8]);
    assert_eq!(*r.is_eq().expect("error reading"), true);
    assert_eq!(*r.is_ne().expect("error reading"), false);
    assert_eq!(*r.is_lt().expect("error reading"), true);
    assert_eq!(*r.is_gt().expect("error reading"), false);
    assert_eq!(*r.is_le().expect("error reading"), true);
    assert_eq!(*r.is_ge().expect("error reading"), false);
    assert_eq!(*r.is_lt2().expect("error reading"), false);
    assert_eq!(*r.is_gt2().expect("error reading"), true);
}
