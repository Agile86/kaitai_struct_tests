// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
#[path = "../formats/mod.rs"] mod formats;
use formats::float_to_i::*;

#[test]
fn test_float_to_i() {
    let bytes = fs::read("../../src/floating_points.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<FloatToI>> = FloatToI::read_into(&_io, None, None);
    let r : OptRc<FloatToI>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.single_value(), 0.5);
    assert_eq!(*r.double_value(), 0.25);
    assert_eq!(*r.single_i().expect("error reading"), 0);
    assert_eq!(*r.double_i().expect("error reading"), 0);
    assert_eq!(*r.float1_i().expect("error reading"), 1);
    assert_eq!(*r.float2_i().expect("error reading"), 1);
    assert_eq!(*r.float3_i().expect("error reading"), 1);
    assert_eq!(*r.float4_i().expect("error reading"), -2);
}
