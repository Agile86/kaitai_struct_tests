// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::term_u1_val::*;

#[test]
fn test_term_u1_val() {
    let bytes = fs::read("../../src/str_encodings.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<TermU1Val>> = TermU1Val::read_into(&_io, None, None);
    let r : OptRc<TermU1Val>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.foo(), vec![0xau8, 0x0u8, 0x53u8, 0x6fu8, 0x6du8, 0x65u8, 0x20u8, 0x41u8, 0x53u8, 0x43u8, 0x49u8, 0x49u8, 0xfu8, 0x0u8]);
    assert_eq!(*r.bar(), "\u{3053}\u{3093}\u{306b}");
}
