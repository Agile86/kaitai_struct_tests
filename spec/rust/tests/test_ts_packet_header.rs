// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
#[path = "../formats/mod.rs"] mod formats;
use formats::ts_packet_header::*;

#[test]
fn test_ts_packet_header() {
    let bytes = fs::read("../../src/ts_packet.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<TsPacketHeader>> = TsPacketHeader::read_into(&_io, None, None);
    let r : OptRc<TsPacketHeader>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.sync_byte(), 71);
    assert_eq!(*r.transport_error_indicator(), false);
    assert_eq!(*r.payload_unit_start_indicator(), false);
    assert_eq!(*r.transport_priority(), true);
    assert_eq!(*r.pid(), 33);
    assert_eq!(*r.transport_scrambling_control(), 0);
    assert_eq!(*r.adaptation_field_control(), TsPacketHeader_AdaptationFieldControlEnum::PayloadOnly);
}
