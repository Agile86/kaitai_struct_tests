// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::switch_manual_str::*;

#[test]
fn test_switch_manual_str() {
    let bytes = fs::read("../../src/switch_opcodes.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<SwitchManualStr>> = SwitchManualStr::read_into(&_io, None, None);
    let r : OptRc<SwitchManualStr>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(r.opcodes().len(), 4);
    assert_eq!(*r.opcodes()[0 as usize].code(), "S");
    assert_eq!(*Into::<OptRc<SwitchManualStr_Opcode_Strval>>::into(&*r.opcodes()[0 as usize].body().as_ref().unwrap()).value(), "foobar");
    assert_eq!(*r.opcodes()[1 as usize].code(), "I");
    assert_eq!(*Into::<OptRc<SwitchManualStr_Opcode_Intval>>::into(&*r.opcodes()[1 as usize].body().as_ref().unwrap()).value(), 66);
    assert_eq!(*r.opcodes()[2 as usize].code(), "I");
    assert_eq!(*Into::<OptRc<SwitchManualStr_Opcode_Intval>>::into(&*r.opcodes()[2 as usize].body().as_ref().unwrap()).value(), 55);
    assert_eq!(*r.opcodes()[3 as usize].code(), "S");
    assert_eq!(*Into::<OptRc<SwitchManualStr_Opcode_Strval>>::into(&*r.opcodes()[3 as usize].body().as_ref().unwrap()).value(), "");
}
