// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
#[path = "../formats/mod.rs"] mod formats;
use formats::bcd_user_type_le::*;

#[test]
fn test_bcd_user_type_le() {
    let bytes = fs::read("../../src/bcd_user_type_le.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<BcdUserTypeLe>> = BcdUserTypeLe::read_into(&_io, None, None);
    let r : OptRc<BcdUserTypeLe>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.ltr().as_int().expect("error reading"), 12345678);
    assert_eq!(*r.ltr().as_str().expect("error reading"), "12345678");
    assert_eq!(*r.rtl().as_int().expect("error reading"), 87654321);
    assert_eq!(*r.rtl().as_str().expect("error reading"), "87654321");
    assert_eq!(*r.leading_zero_ltr().as_int().expect("error reading"), 123456);
    assert_eq!(*r.leading_zero_ltr().as_str().expect("error reading"), "00123456");
}
