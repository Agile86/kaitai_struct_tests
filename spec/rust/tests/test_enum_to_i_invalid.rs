// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::enum_to_i_invalid::*;

#[test]
fn test_enum_to_i_invalid() {
    let bytes = fs::read("../../src/term_strz.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<EnumToIInvalid>> = EnumToIInvalid::read_into(&_io, None, None);
    let r : OptRc<EnumToIInvalid>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.pet_1(), EnumToIInvalid_Animal::Dog);
    let n : i64 = (&*r.pet_2()).into();
    assert_eq!(n, 111);
    assert_eq!(*r.pet_2_i().expect("error reading"), 111);
    assert_eq!(*r.pet_2_i_to_s().expect("error reading"), "111");
    assert_eq!(*r.pet_2_mod().expect("error reading"), 32879);
    assert_eq!(*r.one_lt_two().expect("error reading"), true);
    assert_eq!(*r.pet_2_eq_int_t().expect("error reading"), true);
    assert_eq!(*r.pet_2_eq_int_f().expect("error reading"), false);
}
