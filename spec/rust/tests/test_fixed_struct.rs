// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
#[path = "../formats/mod.rs"] mod formats;
use formats::fixed_struct::*;

#[test]
fn test_fixed_struct() {
    let bytes = fs::read("../../src/fixed_struct.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<FixedStruct>> = FixedStruct::read_into(&_io, None, None);
    let r : OptRc<FixedStruct>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.hdr().expect("error reading").uint8(), 255);
    assert_eq!(*r.hdr().expect("error reading").uint16(), 65535);
    assert_eq!(*r.hdr().expect("error reading").uint32(), 4294967295);
    assert_eq!(*r.hdr().expect("error reading").uint64(), 18446744073709551615);
    assert_eq!(*r.hdr().expect("error reading").sint8(), -1);
    assert_eq!(*r.hdr().expect("error reading").sint16(), -1);
    assert_eq!(*r.hdr().expect("error reading").sint32(), -1);
    assert_eq!(*r.hdr().expect("error reading").sint64(), -1);
    assert_eq!(*r.hdr().expect("error reading").uint16le(), 66);
    assert_eq!(*r.hdr().expect("error reading").uint32le(), 66);
    assert_eq!(*r.hdr().expect("error reading").uint64le(), 66);
    assert_eq!(*r.hdr().expect("error reading").sint16le(), -66);
    assert_eq!(*r.hdr().expect("error reading").sint32le(), -66);
    assert_eq!(*r.hdr().expect("error reading").sint64le(), -66);
    assert_eq!(*r.hdr().expect("error reading").uint16be(), 66);
    assert_eq!(*r.hdr().expect("error reading").uint32be(), 66);
    assert_eq!(*r.hdr().expect("error reading").uint64be(), 66);
    assert_eq!(*r.hdr().expect("error reading").sint16be(), -66);
    assert_eq!(*r.hdr().expect("error reading").sint32be(), -66);
    assert_eq!(*r.hdr().expect("error reading").sint64be(), -66);
}
