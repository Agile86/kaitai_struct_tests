// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::buffered_struct::*;

#[test]
fn test_buffered_struct() {
    let bytes = fs::read("../../src/buffered_struct.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<BufferedStruct>> = BufferedStruct::read_into(&_io, None, None);
    let r : OptRc<BufferedStruct>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.len1(), 16);
    assert_eq!(*r.block1().number1(), 66);
    assert_eq!(*r.block1().number2(), 67);
    assert_eq!(*r.len2(), 8);
    assert_eq!(*r.block2().number1(), 68);
    assert_eq!(*r.block2().number2(), 69);
    assert_eq!(*r.finisher(), 238);
}
