// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
#[path = "../formats/mod.rs"] mod formats;
use formats::instance_user_array::*;

#[test]
fn test_instance_user_array() {
    let bytes = fs::read("../../src/instance_std_array.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<InstanceUserArray>> = InstanceUserArray::read_into(&_io, None, None);
    let r : OptRc<InstanceUserArray>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.ofs(), 16);
    assert_eq!(*r.qty_entries(), 3);
    assert_eq!(*r.entry_size(), 4);
    assert_eq!(r.user_entries().expect("error reading").len(), 3);
    assert_eq!(*r.user_entries().expect("error reading")[0 as usize].word1(), 4369);
    assert_eq!(*r.user_entries().expect("error reading")[0 as usize].word2(), 4369);
    assert_eq!(*r.user_entries().expect("error reading")[1 as usize].word1(), 8738);
    assert_eq!(*r.user_entries().expect("error reading")[1 as usize].word2(), 8738);
    assert_eq!(*r.user_entries().expect("error reading")[2 as usize].word1(), 13107);
    assert_eq!(*r.user_entries().expect("error reading")[2 as usize].word2(), 13107);
}
