// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::expr_bytes_non_literal::*;

#[test]
fn test_expr_bytes_non_literal() {
    let bytes = fs::read("../../src/enum_negative.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<ExprBytesNonLiteral>> = ExprBytesNonLiteral::read_into(&_io, None, None);
    let r : OptRc<ExprBytesNonLiteral>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(r.calc_bytes().expect("error reading").len(), 2);
    assert_eq!(r.calc_bytes().expect("error reading")[0 as usize], 255);
    assert_eq!(r.calc_bytes().expect("error reading")[1 as usize], 1);
}
