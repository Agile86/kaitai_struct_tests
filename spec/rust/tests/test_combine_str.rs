// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
#[path = "../formats/mod.rs"] mod formats;
use formats::combine_str::*;

#[test]
fn test_combine_str() {
    let bytes = fs::read("../../src/term_strz.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<CombineStr>> = CombineStr::read_into(&_io, None, None);
    let r : OptRc<CombineStr>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.str_term(), "foo");
    assert_eq!(*r.str_limit(), "bar|");
    assert_eq!(*r.str_eos(), "baz@");
    assert_eq!(*r.str_calc().expect("error reading"), "bar");
    assert_eq!(*r.str_calc_bytes().expect("error reading"), "baz");
    assert_eq!(*r.term_or_limit().expect("error reading"), "foo");
    assert_eq!(*r.term_or_eos().expect("error reading"), "baz@");
    assert_eq!(*r.term_or_calc().expect("error reading"), "foo");
    assert_eq!(*r.term_or_calc_bytes().expect("error reading"), "baz");
    assert_eq!(*r.limit_or_eos().expect("error reading"), "bar|");
    assert_eq!(*r.limit_or_calc().expect("error reading"), "bar");
    assert_eq!(*r.limit_or_calc_bytes().expect("error reading"), "bar|");
    assert_eq!(*r.eos_or_calc().expect("error reading"), "bar");
    assert_eq!(*r.eos_or_calc_bytes().expect("error reading"), "baz@");
    assert_eq!(*r.calc_or_calc_bytes().expect("error reading"), "baz");
}
