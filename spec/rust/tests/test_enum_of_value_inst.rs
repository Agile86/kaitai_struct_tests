// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::enum_of_value_inst::*;

#[test]
fn test_enum_of_value_inst() {
    let bytes = fs::read("../../src/enum_0.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<EnumOfValueInst>> = EnumOfValueInst::read_into(&_io, None, None);
    let r : OptRc<EnumOfValueInst>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.pet_1(), EnumOfValueInst_Animal::Cat);
    assert_eq!(*r.pet_2(), EnumOfValueInst_Animal::Chicken);
    assert_eq!(*r.pet_3().expect("error reading"), EnumOfValueInst_Animal::Dog);
    assert_eq!(*r.pet_4().expect("error reading"), EnumOfValueInst_Animal::Dog);
}
