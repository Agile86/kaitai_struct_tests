// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::expr_str_ops::*;

#[test]
fn test_expr_str_ops() {
    let bytes = fs::read("../../src/term_strz.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<ExprStrOps>> = ExprStrOps::read_into(&_io, None, None);
    let r : OptRc<ExprStrOps>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.one(), "foo|b");
    assert_eq!(*r.one_len().expect("error reading"), 5);
    assert_eq!(*r.one_rev().expect("error reading"), "b|oof");
    assert_eq!(*r.one_substr_0_to_3().expect("error reading"), "foo");
    assert_eq!(*r.one_substr_2_to_5().expect("error reading"), "o|b");
    assert_eq!(*r.one_substr_3_to_3().expect("error reading"), "");
    assert_eq!(*r.two().expect("error reading"), "0123456789");
    assert_eq!(*r.two_len().expect("error reading"), 10);
    assert_eq!(*r.two_rev().expect("error reading"), "9876543210");
    assert_eq!(*r.two_substr_0_to_7().expect("error reading"), "0123456");
    assert_eq!(*r.two_substr_4_to_10().expect("error reading"), "456789");
    assert_eq!(*r.two_substr_0_to_10().expect("error reading"), "0123456789");
    assert_eq!(*r.to_i_attr().expect("error reading"), 9173);
    assert_eq!(*r.to_i_r10().expect("error reading"), -72);
    assert_eq!(*r.to_i_r2().expect("error reading"), 86);
    assert_eq!(*r.to_i_r8().expect("error reading"), 465);
    assert_eq!(*r.to_i_r16().expect("error reading"), 18383);
}
