// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
#[path = "../formats/mod.rs"] mod formats;
use formats::expr_calc_array_ops::*;

#[test]
fn test_expr_calc_array_ops() {
    let bytes = fs::read("../../src/fixed_struct.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<ExprCalcArrayOps>> = ExprCalcArrayOps::read_into(&_io, None, None);
    let r : OptRc<ExprCalcArrayOps>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.int_array_size().expect("error reading"), 7);
    assert_eq!(*r.int_array_first().expect("error reading"), 10);
    assert_eq!(*r.int_array_mid().expect("error reading"), 25);
    assert_eq!(*r.int_array_last().expect("error reading"), 1000);
    assert_eq!(*r.int_array_min().expect("error reading"), 10);
    assert_eq!(*r.int_array_max().expect("error reading"), 1000);
    assert_eq!(*r.double_array_size().expect("error reading"), 5);
    assert_eq!(*r.double_array_first().expect("error reading"), 10.0);
    assert_eq!(*r.double_array_mid().expect("error reading"), 25.0);
    assert_eq!(*r.double_array_last().expect("error reading"), 3.14159);
    assert_eq!(*r.double_array_min().expect("error reading"), 3.14159);
    assert_eq!(*r.double_array_max().expect("error reading"), 100.0);
    assert_eq!(*r.str_array_size().expect("error reading"), 4);
    assert_eq!(*r.str_array_first().expect("error reading"), "un");
    assert_eq!(*r.str_array_mid().expect("error reading"), "deux");
    assert_eq!(*r.str_array_last().expect("error reading"), "quatre");
    assert_eq!(*r.str_array_min().expect("error reading"), "deux");
    assert_eq!(*r.str_array_max().expect("error reading"), "un");
}
