// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
#[path = "../formats/mod.rs"] mod formats;
use formats::expr_ops_parens::*;

#[test]
fn test_expr_ops_parens() {
    let bytes = fs::read("../../src/enum_negative.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<ExprOpsParens>> = ExprOpsParens::read_into(&_io, None, None);
    let r : OptRc<ExprOpsParens>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.i_sum_to_str().expect("error reading"), "29");
    assert_eq!(*r.f_sum_to_int().expect("error reading"), 9);
    assert_eq!(*r.str_concat_len().expect("error reading"), 10);
    assert_eq!(*r.str_concat_rev().expect("error reading"), "9876543210");
    assert_eq!(*r.str_concat_substr_2_to_7().expect("error reading"), "23456");
    assert_eq!(*r.str_concat_to_i().expect("error reading"), 123456789);
    assert_eq!(*r.bool_eq().expect("error reading"), 0);
    assert_eq!(*r.bool_and().expect("error reading"), 0);
    assert_eq!(*r.bool_or().expect("error reading"), 1);
}
