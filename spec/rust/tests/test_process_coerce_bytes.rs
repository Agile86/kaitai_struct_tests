// Autogenerated from KST: please remove this line if doing any edits by hand!

#![allow(unused_variables)]
#![allow(unused_assignments)]
#![allow(overflowing_literals)]
use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::process_coerce_bytes::*;

#[test]
fn test_process_coerce_bytes() {
    let bytes = fs::read("../../src/process_coerce_bytes.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let res: KResult<OptRc<ProcessCoerceBytes>> = ProcessCoerceBytes::read_into(&_io, None, None);
    let r : OptRc<ProcessCoerceBytes>;

    if let Err(err) = res {
        panic!("{:?}", err);
    } else {
        r = res.unwrap();
    }

    assert_eq!(*r.records()[0 as usize].flag(), 0);
    assert_eq!(*r.records()[0 as usize].buf().expect("error reading"), vec![0x41u8, 0x41u8, 0x41u8, 0x41u8]);
    assert_eq!(*r.records()[1 as usize].flag(), 1);
    assert_eq!(*r.records()[1 as usize].buf().expect("error reading"), vec![0x42u8, 0x42u8, 0x42u8, 0x42u8]);
}
